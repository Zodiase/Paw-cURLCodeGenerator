// Generated by CoffeeScript 1.8.0
(function() {
  var addslashes, cURLCodeGenerator;

  require("mustache.js");

  require("URI.js");

  addslashes = function(str) {
    return ("" + str).replace(/[\\"]/g, '\\$&');
  };

  cURLCodeGenerator = function() {
    this.headers = function(request) {
      var header_name, header_value, headers;
      headers = request.headers;
      return {
        "has_headers": Object.keys(headers).length > 0,
        "header_list": (function() {
          var _results;
          _results = [];
          for (header_name in headers) {
            header_value = headers[header_name];
            _results.push({
              "header_name": addslashes(header_name),
              "header_value": addslashes(header_value)
            });
          }
          return _results;
        })()
      };
    };
    this.body = function(request) {
      var multipart_body, name, raw_body, url_encoded_body, value;
      url_encoded_body = request.urlEncodedBody;
      if (url_encoded_body) {
        return {
          "has_url_encoded_body": true,
          "url_encoded_body": (function() {
            var _results;
            _results = [];
            for (name in url_encoded_body) {
              value = url_encoded_body[name];
              _results.push({
                "name": addslashes(name),
                "value": addslashes(value)
              });
            }
            return _results;
          })()
        };
      }
      multipart_body = request.multipartBody;
      if (multipart_body) {
        return {
          "has_multipart_body": true,
          "multipart_body": (function() {
            var _results;
            _results = [];
            for (name in multipart_body) {
              value = multipart_body[name];
              _results.push({
                "name": addslashes(name),
                "value": addslashes(value)
              });
            }
            return _results;
          })()
        };
      }
      raw_body = request.body;
      if (raw_body) {
        if (raw_body.length < 5000) {
          return {
            "has_raw_body": true,
            "raw_body": addslashes(raw_body)
          };
        } else {
          return {
            "has_long_body": true
          };
        }
      }
    };
    this.generate = function(context) {
      var request, template, view;
      request = context.getCurrentRequest();
      view = {
        "request": context.getCurrentRequest(),
        "headers": this.headers(request),
        "body": this.body(request)
      };
      template = readFile("curl.mustache");
      return Mustache.render(template, view);
    };
  };

  cURLCodeGenerator.identifier = "com.luckymarmot.PawExtensions.cURLCodeGenerator";

  cURLCodeGenerator.title = "cURL";

  registerCodeGenerator(cURLCodeGenerator);

}).call(this);
